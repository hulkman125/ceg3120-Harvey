.ORIG x3000

LEA R0, MESSAGE_GET_INPUT
PUTS
JSR GET_INPUT
ST R0, STRING_START_1

LEA R0, MESSAGE_GET_INPUT
PUTS
JSR GET_INPUT
ST R0, STRING_START_2

LEA R0, MESSAGE_OUTPUT
PUTS
LD R0, STRING_START_1
PUTS
LD R0, NEW_LINE_ASCII
OUT

LEA R0, MESSAGE_OUTPUT
PUTS
LD R0, STRING_START_2
PUTS

HALT

STRING_START_1 .FILL #0
STRING_START_2 .FILL #0

MESSAGE_GET_INPUT .STRINGZ "Enter a string: "
MESSAGE_OUTPUT .STRINGZ "You entered: "
NEW_LINE_ASCII .FILL #10

GET_INPUT
ST R7, SAVE_R7_GET_INPUT

; shift up the string start to
; the previous string's end
LD R0, VAR_STRING_START
LD R1, VAR_STRING_LENGTH
ADD R0, R0, R1
ADD R0, R0, #1
ST R0, VAR_STRING_START

; stringLength = 0
AND R0, R0, #0
ST R0, VAR_STRING_LENGTH

START_INPUT_LOOP
GETC ; get input and
OUT
ST R0, INPUT ; check if \n to break out
LD R1, NEW_LINE_NEG_ASCII
ADD R0, R0, R1
BRz END_INPUT_LOOP

; calculate current character index
LD R0, VAR_STRING_START
LD R1, VAR_STRING_LENGTH
ADD R0, R0, R1

; store character at end of string
LD R1, INPUT
STR R1, R0, #0

; increment size
LD R0, VAR_STRING_LENGTH
ADD R0, R0, #1
ST R0, VAR_STRING_LENGTH

BRnzp START_INPUT_LOOP
END_INPUT_LOOP

; calculate current character index
LD R0, VAR_STRING_START
LD R1, VAR_STRING_LENGTH
ADD R0, R0, R1

; store null character at end of string
AND R1, R1, #0
STR R1, R0, #0

; get return value (string start addr)
LD R0, VAR_STRING_START

LD R7, SAVE_R7_GET_INPUT
RET

SAVE_R7_GET_INPUT .FILL #0

INPUT .FILL #0

NEW_LINE_NEG_ASCII .FILL #-10

VAR_STRING_START .FILL x4000
VAR_STRING_LENGTH .FILL #0

.END